
figure {
	margin: 1em 0;

	&:has(figcaption) {
		padding: .5rem;
		margin-inline: -.5em;
		border: 1px solid var(--color-gray-80);
		box-shadow: 0 .1em .2em var(--color-gray-95);
		text-align: center;
		background: white;
	}

	/* Annoying Markdown artifacts */
	> p,
	figcaption > p:only-child {
		display: contents;
	}

	> img,
	> video,
	> p > img,
	> p > video {
		max-height: 75svh;
	}

	& figcaption {
		font: 500 75% var(--font-sans);
		color: var(--color-gray-medium);
		background: var(--color-gray-95);
		padding: .5rem;
		margin: -.5rem;
		margin-top: .5rem;
		counter-increment: figure;
		text-align: left;

		&::before {
			content: "Figure " counter(figure) ": ";
			font-weight: bold;
		}

		& a:not(:hover, :focus, :active) {
			color: inherit;
			text-decoration: underline;
			text-decoration-color: color-mix(in lab, currentColor, transparent 70%);
		}
	}

	/* Variations */

	&.center {
		width: fit-content;
		margin-inline: auto;
	}

	&.float {
		--small-figure-max-width: 200px;
		--small-figure-min-width: 100px;
		/* Max width is the margin width */
		--small-figure-width: calc(50vw - var(--content-width) / 2 - 2em);
		--small-figure-clamped-width: clamp(var(--small-figure-min-width), var(--small-figure-width), var(--small-figure-max-width));
		/* Margin */
		--small-figure-outset: calc(-1em - var(--small-figure-clamped-width));

		max-width: var(--small-figure-clamped-width);
		margin: 0;

		&:where(.float) {
			float: left;
			margin-right: 1em;
			margin-left: var(--small-figure-outset);
		}

		&:where(.float:nth-child(odd of .float)) {
			float: right;
			margin-left: 1em;
			margin-right: var(--small-figure-outset);
		}

		@media (width < 1200px) {
			/* Simple floats */
			--small-figure-width: calc(25vw - 2em);
			--small-figure-outset: 0;
			margin-bottom: 1em;
		}

		@media (width < 600px) {
			float: none;
			margin: 1em 0;
			display: grid;
			gap: 1em;
			max-width: calc(3 * var(--small-figure-max-width));
			grid-template-columns: var(--small-figure-max-width) 1fr;
		}
	}

	& > a > img {
		display: block;
	}

	/* Has multiple images? */
	&:has(> :nth-last-child(3), img:nth-of-type(2)),
	&.multiple {
		/* Pointless <p> created from Markdown */
		& > p:has(> img):not(:has(> :not(img))) { /* Only contains img children */
			display: contents;
		}

		&:has(> .main) { /* Has main image? */
			display: grid;
			grid-template-columns: 3fr 1fr;
			grid-auto-flow: dense;
			gap: .3rem;

			> .main {
				grid-row-end: span 2;
				height: 100%;
			}

			> :not(.main, figcaption) {
				grid-column: 2;

				xmax-width: 250px;
			}

			& figcaption {
				grid-column-end: span 2;
			}
		}

		&:not(:has(> .main)) { /* No main image, display all side by side */
			display: flex;
			align-items: start;
			flex-wrap: wrap;
			gap: .5rem;

			> :not(figcaption),
			> p > img {
				width: calc(50% - .25rem);
				min-width: 0;
				flex: 1;
				object-fit: contain;
			}

			> figcaption {
				flex-basis: 100%;
				box-sizing: content-box;
			}
		}
	}
}
